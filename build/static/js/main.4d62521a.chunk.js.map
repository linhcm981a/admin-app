{"version":3,"sources":["login.svg","components/login/login.jsx","components/login/register.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Login","_React$Component","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inherits","createClass","key","value","react_default","a","createElement","className","ref","containerRef","src","loginImg","htmlFor","type","name","placeholder","React","Component","Register","App","_this","state","isLogginActive","rightSide","classList","add","remove","setState","prevState","_this2","current","currentActive","container","login_Login","register_Register","App_RightSide","onClick","changeState","bind","RightSide","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d62521a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/login.9a76e74e.svg\";","import React from \"react\";\nimport loginImg from \"../../login.svg\";\n\nexport class Login extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"base-container\" ref={this.props.containerRef}>\n        <div className=\"header\">Login</div>\n        <div className=\"content\">\n          <div className=\"image\">\n            <img src={loginImg} />\n          </div>\n          <div className=\"form\">\n            <div className=\"form-group\">\n              <label htmlFor=\"username\">Username</label>\n              <input type=\"text\" name=\"username\" placeholder=\"username\" />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"password\">Password</label>\n              <input type=\"password\" name=\"password\" placeholder=\"password\" />\n            </div>\n          </div>\n        </div>\n        <div className=\"footer\">\n          <button type=\"button\" className=\"btn\">\n            Login\n          </button>\n        </div>\n      </div>\n    );\n  }\n}","import React from \"react\";\nimport loginImg from \"../../login.svg\";\n\nexport class Register extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"base-container\" ref={this.props.containerRef}>\n        <div className=\"header\">Register</div>\n        <div className=\"content\">\n          <div className=\"image\">\n            <img src={loginImg} />\n          </div>\n          <div className=\"form\">\n            <div className=\"form-group\">\n              <label htmlFor=\"username\">Username</label>\n              <input type=\"text\" name=\"username\" placeholder=\"username\" />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"email\">Email</label>\n              <input type=\"text\" name=\"email\" placeholder=\"email\" />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"password\">Password</label>\n              <input type=\"password\" name=\"password\" placeholder=\"password\" />\n            </div>\n          </div>\n        </div>\n        <div className=\"footer\">\n          <button type=\"button\" className=\"btn\">\n            Register\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.scss\";\nimport { Login, Register } from \"./components/login/index\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLogginActive: true\n    };\n  }\n\n  componentDidMount() {\n    //Add .right by default\n    this.rightSide.classList.add(\"right\");\n  }\n\n  changeState() {\n    const { isLogginActive } = this.state;\n\n    if (isLogginActive) {\n      this.rightSide.classList.remove(\"right\");\n      this.rightSide.classList.add(\"left\");\n    } else {\n      this.rightSide.classList.remove(\"left\");\n      this.rightSide.classList.add(\"right\");\n    }\n    this.setState(prevState => ({ isLogginActive: !prevState.isLogginActive }));\n  }\n\n  render() {\n    const { isLogginActive } = this.state;\n    const current = isLogginActive ? \"Register\" : \"Login\";\n    const currentActive = isLogginActive ? \"login\" : \"register\";\n    return (\n      <div className=\"App\">\n        <div className=\"login\">\n          <div className=\"container\" ref={ref => (this.container = ref)}>\n            {isLogginActive && (\n              <Login containerRef={ref => (this.current = ref)} />\n            )}\n            {!isLogginActive && (\n              <Register containerRef={ref => (this.current = ref)} />\n            )}\n          </div>\n          <RightSide\n            current={current}\n            currentActive={currentActive}\n            containerRef={ref => (this.rightSide = ref)}\n            onClick={this.changeState.bind(this)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst RightSide = props => {\n  return (\n    <div\n      className=\"right-side\"\n      ref={props.containerRef}\n      onClick={props.onClick}\n    >\n      <div className=\"inner-container\">\n        <div className=\"text\">{props.current}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}